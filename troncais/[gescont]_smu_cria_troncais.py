# -*- coding: utf-8 -*-
"""[GesCont] smu_cria_troncais.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kdsRP_5nvOO9Tcuk5IBvwwuaF5ogOZc7
"""

#!pip install folium requests polyline
#!pip install geopandas shapely

import folium
import requests
import polyline
import pandas as pd

key='1B6cbdloFTjOh4dvjZ9v3jCIdeAHHgeA40M39lNN9zVs'
link='https://docs.google.com/spreadsheet/ccc?key='+key+'&output=csv'
df_bairros = pd.read_csv(link, sep=',', encoding='utf-8')
print('https://docs.google.com/spreadsheet/ccc?key='+key)
df_bairros.columns=['Bairro', 'lat', 'lon']
bairros_dict = df_bairros.set_index('Bairro')[['lat', 'lon']].apply(tuple, axis=1).to_dict()
df_bairros

# === 1. Definir Rotas com Multiplos Waypoints e Nome dos Pontos ===

rotas = [
     #====================================
     # Zona Rural
     #====================================
     {
         "nome": "ZR Sarandira",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Sarandira",-21.83062357166665, -43.18820574318265),
         ],
         "atendimento":[
             'Sarandira',
         ],
         "color":  '#4169E1'
     },

     {
         "nome": "ZR Torreões",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Torreões",-21.863094329834,-43.5416946411133),
         ],
         "atendimento":[
             'Torreões',
         ],
         "color":  '#4169E1'
     },

     {
         "nome": "ZR Humaitá",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Humaitá",-21.76935990406484, -43.49035121215151),
         ],
         "atendimento":[
             'Humaitá',
         ],
         "color":  '#4169E1'
     },

     {
         "nome": "ZR Paula Lima",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Paula Lima",-21.58199835857271, -43.48698781282178),
         ],
         "atendimento":[
             'Paula Lima',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Monte Verde",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Monte Verde", -21.9175662994385,-43.518726348877),
         ],
         "atendimento":[
             'Monte Verde',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Lagoa",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Lagoa", -21.779202651256885,-43.439609112191576),
         ],
         "atendimento":[
             'Lagoa',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Santa Córdula",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Santa Córdula", -21.8836460113525,-43.3945007324219),
         ],
         "atendimento":[
             'Santa Córdula',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Dias Tavares",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Dias Tavares", -21.6478614807129,-43.4541473388672),
         ],
         "atendimento":[
             'Dias Tavares',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Chapéu D'uvas",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Chapéu D'uvas", -21.5932941436768,-43.5080909729004),
         ],
         "atendimento":[
             'Chapéu D´uvas',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Igrejinha",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Igrejinha", -21.7086601257324,-43.4878044128418),
         ],
         "atendimento":[
             'Igrejinha',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR BR040",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal BR040", -21.55302425226195,-43.508031967199294),
         ],
         "atendimento":[
             'BR040',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Valadares",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Valadares", -21.760794908761433,-43.60123872756959),
         ],
         "atendimento":[
             'Valadares',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Rosário de Minas",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Rosário de Minas", -21.7070465087891,-43.619384765625),
         ],
         "atendimento":[
             'Rosário de Minas',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Toledos",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Toledos", -21.7919406890869,-43.5877914428711),
         ],
         "atendimento":[
             'Toledos',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Palmital",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Palmital", -21.7260360717773,-43.6502723693848),
         ],
         "atendimento":[
             'Palmital',
         ],
         "color":  '#4169E1'
     },

      {
         "nome": "ZR Cicular BR267",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Terminal Cicular BR267",  -21.7747287750244,-43.619800567627),
         ],
         "atendimento":[
             'Cicular BR267',
         ],
         "color":  '#4169E1'
     },
     #====================================
     # Atendimento Urbano
     #====================================
    { "nome": "Troncal Ibitiguaia",
     "pontos": [
             ("Estação Andradas", -21.75365293149013, -43.352283128174854),
             ("Estação Belmiro Braga", -21.777365385048643, -43.345621550553105),
             ("Estação Chácara",-21.784371805513235, -43.345585868043784),
             ("Estação Bela Aurora", -21.79012181519287, -43.35375772422849),
             ("Estação Teixeiras", -21.791527623618585, -43.36117048266517),
             ("Terminal Estrela Alta", -21.801599014770513, -43.36964626315582),
          ],
     "atendimento": [
            "Sagrado Coração de Jesus", 'Santa Efigência','Jardim Gaúcho',
            'Cidade Nova', 'Vale Verde',"Sagrado Coração de Jesus", "Teixeiras",
          ],
       "color": "red"
     },
    { "nome": "Troncal Santa Cruz",
     "pontos": [
             ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
             ("Estação Rodoviária", -21.7382049560547,-43.3742561340332),
             ("Terminal Santa Cruz",  -21.701948779148616, -43.42934211078206),
          ],
     "atendimento": [
            "São Judas Tadeu", 'Santa Cruz',
          ],
       "color": "#FFD700"
     },
    { "nome": "Troncal Acesso Norte",
     "pontos": [
         ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
             ("Estação Rodoviária", -21.7382049560547,-43.3742561340332),
         ("Estação Bairro Industrial", -21.7325706481934,-43.3891258239746),
         ("Estação Barbosa Lage", -21.7178344726563,-43.3980751037598),
         ("Estação Jóquei Clube III",-21.7117805480957,-43.4091110229492),
         ("Estação Benfica",-21.692512512207,-43.4318466186523),
         ("Estação Miguel Marinho",-21.6772365570068,-43.4326438903809),
         ("Estação Barreira do Triunfo",  -21.6570682525635,-43.4319686889648),
          ],
     "atendimento": [
             'Barreira do Triunfo','Náutico', 'Novo Triunfo',#'Miguel Marinho',
             'Jóquei Clube II', 'Jóquei Clube III','Barbosa Lage',
             'Bairro Industrial',
          ],
       "color": "#4B0082"
     },
    {
        "nome": "Troncal JK",
        "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Estação Jóquei Clube",   -21.7271518707275,-43.3960990905762),
            ("Estação Barbosa Lage", -21.7188282012939,-43.4002532958984),
            ("Estação Nova Era 1", -21.710018009702235,-43.41478764275406),
            ("Estação Nova Era 2",  -21.6999034881592,-43.423454284668),
            ("Estação Benfica",-21.692512512207,-43.4318466186523),
            ("Terminal Distrito Industrial", -21.6796836853027,-43.4445381164551),
        ],
        "atendimento":[
            "Benfica","Nova Era","Nova Era II","Nova Era III",
            'Nova Benfica','Cidade do Sol','Jóquei Clube',"Nova Era I",
             'Vila Esperança', 'Vila Esperança II','Ponte Preta',
             'Distrito Industrial', # 'Santa Lúcia',
        ],
        "color": "red"
    },
    {
        "nome": "Troncal Diva Garcia",
        "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Estação Vitorino Braga",  -21.7501430511475,-43.3422813415527),
            ("Estação Linhares", -21.735239371454462, -43.329316383861475),
        ],
        "atendimento":[
            'Linhares', 'Bom Jardim',
        ],
        "color": "#708090"
    },
    {
        "nome": "Troncal Filgueiras",
        "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Estação Paracatú", -21.7307987213135,-43.3567276000977),
            ("Estação Grama",  -21.690476216321635, -43.3493349320224),
            ("Terminal Filgueiras",  -21.666243464981452, -43.30497229782887),
        ],
        "atendimento":[
            #'Filgueiras',
            'Granjas Triunfo',
        ],
        "color": "#8B4513"
    },
    {
        "nome": "Troncal Grama",
        "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Estação Paracatú", -21.7307987213135,-43.3567276000977),
            ("Estação Parque Guarani",  -21.71793954985861, -43.35085020954209),
            ("Estação Granjas Bethanea", -21.709040995702303, -43.35863934441445),
            ("Estação Recanto dos Lagos", -21.702750834801645, -43.35822219317341),
            ("Estação Grama",   -21.690476216321635, -43.3493349320224),
        ],
        "atendimento":[
            "Grama", 'Vila Montanhesa','Parque Guarani', 'Granjas Bethânia',
            'Granjas Bethanea','Granjas Betânea','Granjas Bethanea',
            'Parque Independência', 'Nova Suissa', 'Nova Suiça',
            'Vivendas da Serra','Recanto dos Lagos','Muçunge da Grama',
        ],
        "color": "green"
    },

    {
         "nome": "Troncal Deusdedith Salgado",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
 		        ("Estação Cascatinha", -21.781889813887677, -43.363011957176184),
            ("Estação Alexandre Leonel", -21.78738051317017, -43.36252551895248),
            ("Terminal Estrela Alta", -21.801599014770513, -43.36964626315582),
 		        #("Estação Salvaterra", -21.8170642852783,-43.3787803649902),
         ],
         "atendimento":[
             "Aeroporto", "Salvaterra", "Teixeiras",
         ],
         "color":'#FF00FF'
     },
    {
         "nome": "Troncal Chácara",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
 		        #("Rua Dom Silvério",-21.7811717987061, -43.3468170166016),
            ("Estação Belmiro Braga", -21.777365385048643, -43.345621550553105),
             ("Estação Chácara",-21.784371805513235, -43.345585868043784),
         ],
         "atendimento":[
             "Santa Luzia", "Jardim de Alá",'Santa Cecília',
         ],
         "color":'#FF00FF'
     },

    {
         "nome": "Troncal São Pedro",
         "pontos": [
             ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
             ("Estação Jardim Casablanca", -21.766811224845174, -43.367863810466474),
             ("Estação Santana", -21.770921446358635, -43.377063262328164),
             ("Estação São Pedro", -21.77153556462144, -43.386094097266614),
             ("Terminal Caiçaras", -21.759604315763312, -43.38941931724549),
         ],
         "atendimento":[
            'São Pedro','Condomínio Neo Residencial','Caiçaras', 'Santana',
            'Vina del Mar', 'Alphaville', 'Recanto dos Brugger',
            'Nossa Senhora de Fátima', 'Nova Germânia',
         ],
         "color":'#C04000'
     },

     {
         "nome": "Troncal Nova Califórnia",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            #("Estação Casablanca", -21.76682868669711, -43.36801775564136),
            ("Estação Dom Orione", -21.783647397181216, -43.37101309801605),
            ('Estação Santos Dumont', -21.778993113560045, -43.3845410559541),
            ('Estação Marilândia', -21.784647028368102, -43.3916779702871),
            ("Terminal Nova Califórnia",-21.797691292131322, -43.40160115463466),
         ],
         "atendimento":[
             'Santos Dumont', 'Nova Califórnia', 'Marilândia','Novo Horizonte',
         ],
         "color":  '#2F4F4F'
     },

    {
         "nome": "Troncal Borboleta",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Estação Andradas", -21.75365293149013, -43.352283128174854),
            ("Estação Vale do Ipê", -21.751681197157303, -43.36150077660804),
            ("Estação Borboleta",   -21.75533891326005, -43.376463143983166),
            ("Terminal Nova Germânia", -21.75402855253621, -43.38567921438043),
         ],
         "atendimento":[
            'Nova Germânia', 'Borboleta', 'Vale do Ipê', 'Democrata',
         ],
         "color":'#045D5D'
     },

        {
         "nome": "Circular São Pedro",
         "pontos": [
            ("Terminal Nova Germânia", -21.75402855253621, -43.38567921438043),
            ("Estação Caiçaras", -21.759604315763312, -43.38941931724549),
            ('Estação Santos Dumont', -21.778993113560045, -43.3845410559541),
         ],
         "atendimento":[
         ],
         "color":'red'
     },

     {
         "nome": "Troncal Darcy Vargas",
         "pontos": [
             ("Terminal Renascença", -21.8052406311035,-43.3407554626465),
             ("Estação Previdenciários", -21.8013553619385,-43.3432579040527),
             ("Estação Vale Verde", -21.7981224060059,-43.3470344543457),
             ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
         ],
         "atendimento":[
              "São Geraldo",
             'Bela Aurora', 'Ipiranga'
             #'Arco-íris',
             #'Previdenciários',
         ],
         "color": 'purple'
     },
     {
         "nome": "Troncal Bady Geara",
         "pontos": [
             ("Terminal Bady Geara", -21.799655567909312,-43.354883193969734),
             ("Estação Bela Aurora", -21.79012181519287, -43.35375772422849),
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
         ],
         "atendimento":[
             'Santa Efigênia','Santa Efigenia', 'Jardim Gaúcho',
             'Cidade Nova', 'Vale Verde',"Sagrado Coração de Jesus",
         ],
         "color":  '#0000FF'
     },
         {
         "nome": "Troncal Santa Luzia",
         "pontos": [
             ("Estação Andradas", -21.75365293149013, -43.352283128174854),
             ("Estação Chácara",-21.784371805513235, -43.345585868043784),
         ],
         "atendimento":[
              "Santa Luzia"
             #'Bela Aurora', 'Ipiranga',  'Jardim de Alá',
             #'Arco-íris',
             #'Previdenciários',
         ],
         "color": '#DA70D6'
     },

     {
         "nome": "Troncal Rodoviária",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Estação Rodoviária",-21.7375545501709,-43.3748817443848),
         ],
         "atendimento":[
             'Jardim Natal', 'Milho Branco',
             'Amazônia', 'Francisco Bernardino','Fontesville',
         ],
         "color":  '#4F4F4F'
     },

    {
         "nome": "Troncal Olavo Bilac",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ("Estação Andradas", -21.75365293149013, -43.352283128174854),
            ("Estação Fábrica", -21.743762912933402, -43.37112082984579),
            #("Estação Democrata",-21.750348985465614, -43.363640288865504),
            ("Estação Esplanada",-21.740207459028543, -43.37600362506205),
            ("Estação Olavo Bilac",-21.73868434391112, -43.386620841198),
         ],
         "atendimento":[
             'Monte Castelo', 'Carlos Chagas', 'Esplanada',
         ],
         "color":  'cyan', # '#BC8F8F'
     },

     {
         "nome": "Troncal Retiro",
         "pontos": [
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
            ('Estação Pantaleone Arcuri', -21.765905380249, -43.3367156982422),
            ('Estação Francisco Valadares',  -21.7695140838623,-43.3326225280762),
            ('Estação Vila Ideal', -21.777065883038073,-43.33084524122233),
            #('Estação Graminha', -21.790789559144446, -43.32536224269704),
            ('Estação Granjas Bethel', -21.791048302129937, -43.30266968592235),
            #("Estação Retiro",-21.773151041221855, -43.29154588962496),
            ("Terminal Retiro",-21.773151041221855, -43.29154588962496),
         ],
         "atendimento":[
             'Floresta', 'Barão do Retiro', 'Usina 4', 'Caetés', 'Retiro',
             'Parque das Palmeiras', 'Vila Olavo Costa', ' Vila Furtado de Menezes', 'Vila Ideal'
         ],
         "color":  '#CD853F'
     },

     {
         "nome": "Troncal Santo Antonio",
         "pontos": [
             ("Terminal Santo Antonio", -21.77239316219197, -43.31175296413053),
            ("Estação Lourdes", -21.76705067217738, -43.32749157816214),
            ("Terminal  Getúlio Vargas", -21.760425567627,-43.3462677001953),
         ],
         "atendimento":[
             'Santo Antonio','Nossa Senhora de Lourdes', 'Costa Carvalho'
         ],
         "color":  'green'
     },
     {
         "nome": "Troncal Bandeirantes",
         "pontos": [
             ("Estação Belmiro Braga", -21.777365385048643, -43.345621550553105),
             ("Estação Rui Barbosa", -21.741729894194236, -43.36311151692558),
             ("Estação Eldorado", -21.73795155040383, -43.362612407413486),
             ("Estação Alencar Tristão",-21.734850665730033, -43.3588804725763 ),
             ("Terminal Artur Bernardes", -21.721714577525887, -43.35517738516921),
         ],
         "atendimento":[
             'Bandeirantes','Eldorado',
         ],
         "color":  'yellow'
     },
     {
         "nome": "Troncal Rio Branco",
         "pontos": [
             ("Estação Belmiro Braga", -21.777365385048643, -43.345621550553105),
             ("Estação Paracatú", -21.7307987213135,-43.3567276000977),
         ],
         "atendimento":[
             "Jardim Emaús", "Bela Aurora", "Alto dos Passos"
         ],
         "color": "darkcyan"
    },
]

# === 1. Remover Duplicatas dos Pontos ===
def remover_duplicatas(rotas):
    pontos_unicos = set()
    rotas_sem_duplicatas = []

    for rota in rotas:
        nova_rota = {
            "nome": rota["nome"],
            "pontos": [],
            "atendimento": rota["atendimento"],
            "color": rota["color"]
        }
        for ponto in rota["pontos"]:
            nome_ponto, lat, lon = ponto
            chave_ponto = (lat, lon)  # Identifica pontos pelo par (lat, lon)
            if chave_ponto not in pontos_unicos:
                pontos_unicos.add(chave_ponto)
                nova_rota["pontos"].append(ponto)
        rotas_sem_duplicatas.append(nova_rota)

    return rotas_sem_duplicatas


# === 2. Gerar Relatório ===
import requests

# Função para gerar um link curto do Google Street View
def generate_street_view_link(lat, lon):
    base_url = "https://www.google.com/maps/@?api=1&map_action=pano"
    params = f"&viewpoint={lat},{lon}"
    return base_url + params

count_estacao=0
count_terminal=0
count_zr=0
# Função para gerar o relatório completo
def gerar_relatorio(rotas):
    total_estacoes = 0
    total_terminais = 0
    total_zona_rural = 0
    total_atendimento_urbano = 0

    # Listas para armazenar detalhes de estações e terminais
    lista_estacoes = []
    lista_terminais = []

    # Contadores para cada tipo de ponto
    for rota in rotas:
        for ponto in rota["pontos"]:
            nome_ponto, lat, lon = ponto
            street_view_link = generate_street_view_link(lat, lon)

            if "Terminal" in nome_ponto:
                total_terminais += 1
                lista_terminais.append({
                    "n":total_terminais,
                    "nome": nome_ponto,
                    "latitude": lat,
                    "longitude": lon,
                    "street_view": street_view_link
                })
            else:
                total_estacoes += 1
                lista_estacoes.append({
                    "n":total_estacoes,
                    "nome": nome_ponto,
                    "latitude": lat,
                    "longitude": lon,
                    "street_view": street_view_link
                })

        # Verificar se a rota pertence à zona rural ou urbana
        if "ZR" in rota["nome"]:
            total_zona_rural += len(rota["pontos"])
        else:
            total_atendimento_urbano += len(rota["pontos"])

    # Exibir relatório
    print("=== RELATÓRIO DE ESTAÇÕES E TERMINAIS ===")
    print(f"Total de Estações e Terminais: {total_terminais+total_estacoes}")
    print(f"Total de Estações: {total_estacoes}")
    print(f"Total de Terminais: {total_terminais}")
    print(f"Total de Pontos na Zona Rural (ZR): {total_zona_rural}")
    print(f"Total de Pontos no Atendimento Urbano: {total_atendimento_urbano}")
    print("\n")

    # Detalhamento das estações
    print("=== LISTA DE ESTAÇÕES ===")
    for estacao in lista_estacoes:
        print(f" {estacao['n']}: Nome: {estacao['nome']}")
        print(f"Latitude: {estacao['latitude']}, Longitude: {estacao['longitude']}")
        print(f"Google Street View: {estacao['street_view']}")
        print("-" * 50)

    # Detalhamento dos terminais
    print("\n=== LISTA DE TERMINAIS ===")
    for terminal in lista_terminais:
        print(f" {terminal['n']}: Nome: {terminal['nome']}")
        print(f"Latitude: {terminal['latitude']}, Longitude: {terminal['longitude']}")
        print(f"Google Street View: {terminal['street_view']}")
        print("-" * 50)



# === 3. Executar o Processamento ===
# Remover duplicatas
rotas_sem_duplicatas = remover_duplicatas(rotas)

# Gerar relatório
gerar_relatorio(rotas_sem_duplicatas)

from folium import Marker

# Função para gerar links do Google Maps com Street View
def generate_google_maps_link(lat, lon):
    return f"https://www.google.com/maps/@?api=1&map_action=pano&viewpoint={lat},{lon}"

# Função para criar o mapa interativo
def create_interactive_map(rotas):
    # Criar um mapa centrado em Juiz de Fora (coordenadas aproximadas)
    mapa = folium.Map(location=[-21.760425567627, -43.3462677001953], zoom_start=12)

    # Conjunto para rastrear pontos já adicionados ao mapa
    added_points = set()

    for rota in rotas:
        for ponto in rota["pontos"]:
            nome_ponto, lat, lon = ponto
            nome_rota = rota["nome"]
            # Verificar se o ponto já foi adicionado
            point_key = (nome_ponto, lat, lon)
            if point_key in added_points:
                continue  # Ignorar pontos duplicados

            # Marcar o ponto como adicionado
            added_points.add(point_key)

            # Definir cor do marcador
            if "Terminal" in nome_ponto:
                cor = "red"  # Marcador vermelho para terminais
                if "ZR " in nome_rota:
                  cor = "green"  # Marcador verde para pontos da Zona Rural (ZR)
            else:
                cor = "blue"  # Marcador azul para estações

            # Gerar link do Google Maps
            google_maps_link = generate_google_maps_link(lat, lon)

            # Criar popup com informações
            popup_content = f"""
            <b>{nome_ponto}</b><br>
            Latitude: {lat}<br>
            Longitude: {lon}<br>
            <a href="{google_maps_link}" target="_blank">Ver no Google Maps</a>
            """
            popup = folium.Popup(popup_content, max_width=300)

            # Adicionar marcador ao mapa
            folium.Marker(
                location=[lat, lon],
                popup=popup,
                icon=folium.Icon(color=cor, icon="info-sign")
            ).add_to(mapa)

    # Salvar o mapa como um arquivo HTML
    mapa.save("mapa_interativo_estacoes_street_view.html")
    print("Mapa gerado com sucesso! O arquivo 'mapa_interativo.html' foi criado.")

# Executar a função para criar o mapa
create_interactive_map(rotas)

# === 2. Criar Mapa Base ===
mapa = folium.Map(location=[-21.75, -43.38], zoom_start=13)
radius=0
# === 3. Função para Buscar Rota via OSRM API com Múltiplos Waypoints ===
def rota_osrm(pontos):
    """
    Retorna uma lista de coordenadas da rota através de vários pontos.
    """
    coords = ";".join([f"{lon},{lat}" for _, lat, lon in pontos])
    url = f"http://router.project-osrm.org/route/v1/driving/{coords}?overview=full&geometries=polyline"

    try:
        r = requests.get(url, timeout=10)
        if r.status_code == 200:
            geometry = r.json()["routes"][0]["geometry"]
            return polyline.decode(geometry)
        else:
            print(f"Erro na rota: {r.status_code}")
            return []
    except Exception as e:
        print(f"Falha ao obter rota OSRM: {e}")
        return []

# === 4. Adicionar Rotas e Marcadores ao Mapa com Controle de Camadas ===
stations_layer = folium.FeatureGroup(name="Estações e Terminais")

for rota in rotas:
    coords_rota = rota_osrm(rota["pontos"])

    if coords_rota:
        # Criar grupo de feições para essa rota
        feature_group = folium.FeatureGroup(name=rota["nome"])

        # Adicionar linha da rota ao grupo
        feature_group.add_child(folium.PolyLine(
            locations=coords_rota,
            color=rota["color"],
            weight=5,
            popup=rota["nome"]
        ))

        # Marcar início (verde), fim (vermelho) e waypoints intermediários (azul)
        #nome_inicio, lat_inicio, lon_inicio = rota["pontos"][0]
        #feature_group.add_child(folium.Circle(
        #    location=(lat_inicio, lon_inicio),
        #    radius=radius,
        #    color='grey',
        #    fill=True,
        #    fill_color=rota['color'],
        #    fill_opacity=0.99,
        #    popup=f"{rota['nome']}: {nome_inicio}"
        #))

        #nome_fim, lat_fim, lon_fim = rota["pontos"][-1]
        #feature_group.add_child(folium.Circle(
        #    location=(lat_fim, lon_fim),
        #    radius=radius,
        #    color='grey',
        #    fill=True,
        #    fill_color=rota['color'],
        #    fill_opacity=0.99,
        #    popup=f"{rota['nome']}: {nome_fim}"
        #))

        #for i, (nome_wp, lat_wp, lon_wp) in enumerate(rota["pontos"][1:-1], start=1):
        for i, (nome_wp, lat_wp, lon_wp) in enumerate(rota["pontos"]):
          google_maps_link = generate_google_maps_link(lat_wp, lon_wp)

          # Criar popup com informações
          popup_content = f"""
          <b>{nome_wp}</b><br>
          Latitude: {lat_wp}<br>
          Longitude: {lon_wp}<br>
          <a href="{google_maps_link}" target="_blank">Ver no Google Maps</a>
          """
          popup = folium.Popup(popup_content, max_width=300)

          # Definir cor do marcador
          if "Terminal" in nome_wp:
              cor = "red"  # Marcador vermelho para terminais
              if "ZR " in rota["nome"]:
                cor = "green"  # Marcador verde para pontos da Zona Rural (ZR)
          else:
              cor = "blue"  # Marcador azul para estações

          stations_layer.add_child(
              folium.Marker(
                  location=(lat_wp, lon_wp),
                  icon=folium.Icon(
                      icon="bus",  # Use the bus icon from FontAwesome
                      prefix="fa",  # Specify that the icon comes from FontAwesome
                      color=cor,#"blue",  # Color of the marker (can be adjusted)
                      icon_color="white"  # Color of the icon itself
                  ),
                  popup=popup# f"{rota['nome']}: {nome_wp}"
              )
          )

        for i, nome_ap in enumerate(rota["atendimento"]):
            try:
                (lat_ap, lon_ap) = bairros_dict[nome_ap]
                feature_group.add_child(folium.Circle(
                    location=(lat_ap, lon_ap),
                    radius=radius,
                    color='none',#rota['color'],
                    fill=True,
                    fill_color=rota['color'],
                    fill_opacity=0.5,
                    popup=f"{rota['nome']}: {nome_ap}"
                ))
            except:
                pass

        # Adicionar grupo ao mapa
        mapa.add_child(feature_group)

# === Adicionar Controle de Camadas ===
mapa.add_child(stations_layer)
folium.LayerControl().add_to(mapa)


# === 5. Salvar e Mostrar Mapa ===
mapa.save("mapa_interativo_rotas_troncais.html")
print("🗺️ Mapa salvo como 'mapa_rotas_multiplos_waypoints.html'")

import geopandas as gpd
from shapely.geometry import LineString, Point
import json

print("📦 Preparando dados para exportação GeoJSON e Shapefile...")

# Listas para armazenar geometrias
route_lines = []      # Linhas das rotas
station_points = []   # Pontos dos terminais/estações

# Extrair dados das rotas
for rota in rotas:
    coords_rota = rota_osrm(rota["pontos"])

    if coords_rota:
        # === Linha da rota ===
        line = LineString(coords_rota)
        route_lines.append({
            'nome': rota['nome'],
            'tipo': 'rota',
            'color': rota['color'],
            'geometry': line
        })

    # === Pontos da rota (terminais, estações) ===
    for nome_wp, lat_wp, lon_wp in rota["pontos"]:
        point = Point(lon_wp, lat_wp)  # GeoPandas usa (lon, lat)
        station_points.append({
            'nome': nome_wp,
            'rota': rota['nome'],
            'tipo': 'terminal' if 'Terminal' in nome_wp else 'estacao',
            'color': 'green' if 'ZR ' in rota['nome'] else ('red' if 'Terminal' in nome_wp else 'blue'),
            'geometry': point
        })

    # === Bairros de atendimento (opcional) ===
    # for nome_ap in rota["atendimento"]:
    #     try:
    #         lat_ap, lon_ap = bairros_dict[nome_ap]
    #         point = Point(lon_ap, lat_ap)
    #         station_points.append({
    #             'nome': nome_ap,
    #             'rota': rota['nome'],
    #             'tipo': 'bairro',
    #             'color': rota['color'],
    #             'geometry': point
    #         })
    #     except:
    #         pass

# Criar GeoDataFrames
gdf_rotas = gpd.GeoDataFrame(route_lines, crs="EPSG:4326")
gdf_estacoes = gpd.GeoDataFrame(station_points, crs="EPSG:4326")

# === Salvar como GeoJSON ===
gdf_rotas.to_file("rotas_troncais.geojson", driver="GeoJSON")
gdf_estacoes.to_file("estacoes_terminais.geojson", driver="GeoJSON")

print("✅ GeoJSON salvo: rotas_troncais.geojson e estações_terminais.geojson")

# === Salvar como Shapefile ===
gdf_rotas.to_file("rotas_troncais.shp", driver="ESRI Shapefile")
gdf_estacoes.to_file("estacoes_terminais.shp", driver="ESRI Shapefile")

print("✅ Shapefile salvo: rotas_troncais.shp e estações_terminais.shp")

mapa



import requests
import polyline
from geopy.distance import distance as geodistance

# === Função para calcular rota e distância total ===
import requests
import polyline
from geopy.distance import distance as geodistance

def rota_osrm_distance(pontos):
    """
    Retorna:
        - lista de coordenadas (lat, lon) da rota decodificada,
        - distância total em km,
        - URL da rota no visualizador OSRM.
    """
    # Formatar coordenadas como "lon,lat" (OSRM espera lon,lat)
    coords = ";".join([f"{lon},{lat}" for _, lat, lon in pontos])
    url_api = f"http://router.project-osrm.org/route/v1/driving/{coords}?overview=full&geometries=polyline"

    url_map='https://map.project-osrm.org/'

    coordinates=[(lat,lon) for _, lat, lon in pontos]
    loc='?z=15'
    c=coordinates[0]
    loc +='&center={},{}'.format(c[0],c[1])

    for i in range(len(coordinates)):
      c=coordinates[i]
      loc +='&loc={},{}'.format(c[0],c[1])

    loc+='&hl=en&alt=0&srv=0'
    url_map+=loc

    try:
        r = requests.get(url_api, timeout=10)
        if r.status_code == 200:
            route = r.json()["routes"][0]
            geometry = route["geometry"]
            decoded = polyline.decode(geometry)  # Lista de (lat, lon)

            # Calcular distância total
            total_distance = 0
            for i in range(1, len(decoded)):
                total_distance += geodistance(decoded[i-1], decoded[i]).km

            return decoded, round(total_distance, 2), url_map
        else:
            print(f"Erro na rota (API OSRM): {r.status_code} para {pontos[0][0]} -> {pontos[-1][0]}")
            return [], 0, url_map  # Mesmo erro, retorna link gerado
    except Exception as e:
        print(f"Falha ao obter rota OSRM: {e}")
        return [], 0, url_map  # Retorna link mesmo se falhar

# === Listas para armazenar resultados ===
resultados = []

vel_kmh = 20 # velocidade média em km/h
for rota in rotas:
    nome = rota["nome"]
    pontos = rota["pontos"]

    # Obter rota e distância
    _, distancia_km, url_map = rota_osrm_distance(pontos)

    if distancia_km == 0:
        print(f"⚠️ Falha ao calcular rota para: {nome}")
        continue

    # Tempo de ida (em horas)
    tempo_ida_horas = distancia_km / vel_kmh
    # Tempo de ida e volta (ciclo completo)
    tempo_ciclo_horas = 2 * tempo_ida_horas

    # Frequência: 15 minutos = 0.25 hora
    # Número de ônibus = tempo_ciclo / intervalo
    intervalo_horas = 15/60  # 15 minutos
    frota_necessaria = tempo_ciclo_horas / intervalo_horas

    # Arredondar para cima, pois não pode ter ônibus fracionado
    import math
    frota_final = math.ceil(frota_necessaria)

    resultados.append({
        "Rota": nome,
        "Distância (km)": round(distancia_km, 2),
        "Tempo Ida (min)": round(tempo_ida_horas * 60, 1),
        "Frota Necessária": frota_final,
        'url': url_map,
    })

# === Exibir resultados ===
print("\n" + "="*60)
print("RESUMO DAS ROTAS: KM E FROTA NECESSÁRIA (frequência 15 min)")
print("="*60)
print(f"{'ROTA':<30} {'KM':<8} {'FROTA'} {'URL'}")
print("-"*60)

total_onibus = 0 # sem considerar zona rural
total_rural = 0 # sem considerar zona rural
for item in resultados:
  if 'ZR' not in item['Rota']:
    #print(f"{item['Rota']:<30} {item['Distância (km)']:<8} {item['Frota Necessária']} \t {item['url']}")
    print(f"{item['Rota']:<30} {item['Distância (km)']:<8} {item['Frota Necessária']} ")
    total_onibus +=  item['Frota Necessária']
  else:
    total_rural +=  1


# === Total de ônibus necessário ===
#total_onibus = sum(item["Frota Necessária"] for item in resultados)
print("-"*60)
print(f"Total de ônibus necessários: {total_onibus}")

len(resultados)

#https://docs.google.com/spreadsheets/d/16IMSwhU2OW-BSgjM0fMzJmdxtXYxY2Q09FZh_pXogAU/edit?usp=sharing

key='16IMSwhU2OW-BSgjM0fMzJmdxtXYxY2Q09FZh_pXogAU'
link='https://docs.google.com/spreadsheet/ccc?key='+key+'&output=csv'
print('https://docs.google.com/spreadsheet/ccc?key='+key)
df = pd.read_csv(link, sep=',', encoding='utf-8')

df.sum()

df

